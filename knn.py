# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14SFO9E1xYt5MGeBWKWpyiiNfNbbEurFd

Importing the needed libraries
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

from sklearn import datasets
from sklearn.model_selection import train_test_split,KFold
from sklearn.preprocessing import  Normalizer
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier

from collections import Counter

"""load the dataset"""

iris=datasets.load_iris()
iris_df=pd.DataFrame(data=np.c_[iris['data'],iris['target']],
                     columns=iris['feature_names']+['target'])
iris_df.head()

"""describe the data"""

iris_df.describe()

x=iris_df.iloc[:,:-1]
y=iris_df.iloc[:,-1]

x.head()

y.head()

"""split into training and testing"""

x_train,x_test,y_train,y_test=train_test_split(x , y,
                                               test_size=0.2,
                                               shuffle=True,
                                               random_state=0)
x_train=np.asarray(x_train)
y_train=np.asarray(y_train)

x_test=np.asarray(x_test)
y_test=np.asarray(y_test)

print(f"training set size: {x_train.shape[0]}samles\ntest set size: {x_test.shape[0]}samples")

"""normallizing the dataset"""

scaler=Normalizer().fit(x_train)
normalized_x_train=scaler.transform(x_train)
normalized_x_test=scaler.transform(x_test)

d={0.0:"setosa",1.0:"versicolor",2.0:"virginica"}
before=sns.pairplot(iris_df.replace({"target":d}),hue="target")
before.fig.suptitle("pair plot of dataset before normalization ",y=1.08)

iris_df_2=pd.DataFrame(data=np.c_[normalized_x_train,y_train],
                        columns=iris['feature_names']+['target'])
d={0.0:"setosa",1.0:"versicolor",2.0:"virginica"}
after=sns.pairplot(iris_df_2.replace({"target":d}),hue='target')
after.fig.suptitle("pair plot of dataset after normalization ",y=1.08)

"""KNN step_1"""

def distance_ecu(x_train,x_test_point):
  distances=[]
  for row in range(len(x_train)):
    current_train_point=x_train[row]
    current_distance=0

    for col in range(len(current_train_point)):
      current_distance +=(current_train_point[col]-x_test_point[col])**2

    currentdistance=current_distance
    current_distance=np.sqrt(current_distance)

    distances.append(current_distance)
  distances=pd.DataFrame(data=distances,columns=['dist'])
  return distances

"""KNN step-2"""

def nearest_neighbors(distance_point,k):
  df_nearest=distance_point.sort_values(by='dist',axis=0)
  df_nearest=df_nearest[:k]
  return df_nearest

"""KNN step-3"""

def voting(df_nearest,y_train):
 counter_vote=Counter(y_train[df_nearest.index])
 y_pred=counter_vote.most_common()[0][0]
 return y_pred

"""KNN full algorithm"""

def KNN_from_scratch(x_train,y_train,x_test,k):
  y_pred=[]
  for x_test_point in x_test:
    distance_point=distance_ecu(x_train,x_test_point)
    df_nearest_point=nearest_neighbors(distance_point,k)
    y_pred_point=voting(df_nearest_point,y_train)
    y_pred.append(y_pred_point)
  return y_pred

"""Test the KNN algorithm on the test dataset"""

k=3
#print()
y_pred_scratch=KNN_from_scratch(normalized_x_train,y_train,normalized_x_test,k)
print(y_pred_scratch)

"""compare our implementation with sklearn library"""

knn=KNeighborsClassifier(k)
knn.fit(normalized_x_train,y_train)
y_pred_sklearn=knn.predict(normalized_x_test)
print(y_pred_sklearn)

"""check if th output is exactly same"""

print(np.array_equal(y_pred_sklearn,y_pred_scratch))

"""calculate the accuracy of both methods"""

print(f'The accuracy of our implemenation is {accuracy_score(y_test,y_pred_scratch)}')
print(f'The accuracy of our implemenation is {accuracy_score(y_test,y_pred_sklearn)}')

"""Hyper parameters tuning"""

n_splits=4
kf=KFold(n_splits= n_splits)
accuracy_k= []
k_values=list(range(1,30,2))

for k in k_values:
  accuracy_fold=0
  for normalized_x_train_fold_idx,normalized_x_valid_fold_idx in kf.split(normalized_x_train):
      normalized_x_train_fold=normalized_x_train[normalized_x_train_fold_idx]
      y_train_fold=y_train[normalized_x_train_fold_idx]


      normalized_x_test_fold=normalized_x_train[normalized_x_valid_fold_idx]
      y_valid_fold=y_train[normalized_x_valid_fold_idx]
      y_pred_fold=KNN_from_scratch(normalized_x_train_fold,y_train_fold,normalized_x_test_fold,k)

      accuracy_fold+=accuracy_score(y_pred_fold,y_valid_fold)
  accuracy_fold=accuracy_fold/n_splits
  accuracy_k.append(accuracy_fold)

print(f'The accuracy for each k value was{list(zip(accuracy_k,k_values))}')

print(f'Best acuuracy was{np.max(accuracy_k)},which corresponds to a value of k={k_values[np.argmax(accuracy_k)]}')